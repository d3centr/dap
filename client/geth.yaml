AWSTemplateFormatVersion: 2010-09-09

Parameters:
  GethBuild:
    Type: String
    Default: geth-alltools-linux-amd64-1.10.16-20356e57
    Description: "Change InstanceSize in a `cloudformation update-stack` call to force version update in a running client."
  Image:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-kernel-5.10-hvm-x86_64-gp2
  InstanceSize:
    Type: String
    Default: xlarge
    Description: "'large' for cost-optimized node, 'xlarge' to sync twice faster, '4xlarge' recommended to extract contract events"
  HotVolumeSize:
    Type: Number
    Default: 300
  ColdVolumeSize:
    Type: Number
    Default: 400
  ColdVolumeType:
    Type: String
    Default: gp3
    AllowedValues:
      - gp3
      - sc1
  NetRestrict:
    Type: String
    Default: false
    Description: allow peers from AWS networks only (unsecure)
    AllowedValues:
      - true
      - false

Resources:
  HotVolume:
    Type: AWS::EC2::Volume
    Properties: 
      AvailabilityZone: !Select [0, !GetAZs '']
      VolumeType: gp3
      Size: !Ref HotVolumeSize
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}-HotVolume
  ColdVolume:
    Type: AWS::EC2::Volume
    Properties: 
      AvailabilityZone: !Select [0, !GetAZs '']
      VolumeType: !Ref ColdVolumeType
      Size: !Ref ColdVolumeSize
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}-ColdVolume
  SpotFleet: 
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        AllocationStrategy: lowestPrice
        InstanceInterruptionBehavior: terminate
        TargetCapacity: 1
        IamFleetRole: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/spotfleet.amazonaws.com/AWSServiceRoleForEC2SpotFleet
        LaunchTemplateConfigs:
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - SubnetId: !ImportValue blake-network-subnet-a
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - SubnetId: !ImportValue blake-network-subnet-a
                InstanceType: !Join ['', [m5d., !Ref InstanceSize]]
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - SubnetId: !ImportValue blake-network-subnet-a
                InstanceType: !Join ['', [m5n., !Ref InstanceSize]]
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - ec2.amazonaws.com
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref ManagedPolicy
  ManagedPolicy: 
    # Make sure volumes get created first and deleted last as cfn isn't aware they're attached.
    DependsOn: [HotVolume, ColdVolume]
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - ssm:UpdateInstanceInformation
              - ssmmessages:CreateControlChannel
              - ssmmessages:CreateDataChannel
              - ssmmessages:OpenControlChannel
              - ssmmessages:OpenDataChannel
              - ec2:DescribeVolumes
              - ec2:DescribeInstanceStatus
              - ec2:DescribeNetworkInterfaceAttribute
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - ec2:AttachVolume
            Resource:
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:volume/${HotVolume}
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:volume/${ColdVolume}
            Condition:
              StringLike:
                "ec2:ResourceTag/Name": !Sub ${AWS::StackName}*
          - Effect: Allow
            Action:
              - ec2:AssociateAddress
              - ec2:AttachNetworkInterface
            Resource:
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:*
            Condition:
              StringEquals:
                "ec2:ResourceTag/Name": !Sub ${AWS::StackName}
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole
  EIP:
    Type: AWS::EC2::EIP
    Properties: 
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  # Do not add a network interface in launch template (attach at bootstrap), otherwise:
  # - AWS no longer auto-assigns a public IP, breaking init scripts before EIP is associated
  # - security groups cannot be specified in the launch template itself
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref Image
        InstanceType: !Join ['', [m5., !Ref InstanceSize]]
        SecurityGroupIds:
          - !ImportValue blake-network-listener-sg
          - !ImportValue blake-network-discovery-sg
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Ref AWS::StackName
        UserData:
          Fn::Base64: !Sub |
            Content-Type: multipart/mixed; boundary="//"
            MIME-Version: 1.0
            
            --//
            Content-Type: text/cloud-config; charset="us-ascii"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 7bit
            Content-Disposition: attachment; filename="cloud-config.txt"
            
            #cloud-config
            cloud_final_modules:
            - [scripts-user, always]
            
            --//
            Content-Type: text/x-shellscript; charset="us-ascii"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 7bit
            Content-Disposition: attachment; filename="userdata.txt"
            
            #!/bin/bash
            /opt/aws/bin/cfn-init -s ${AWS::StackName} -r LaunchTemplate --region ${AWS::Region} -c client
            --//--
    Metadata:
    # LaunchTemplate metadata allows configuration updates with instance changes.
      AWS::CloudFormation::Init:
        configSets:
          client:
            - bootstrap
        bootstrap:
          files:
            /tmp/bootstrap/attach-network-interfaces.sh:
              content: !Sub |
                #!/bin/bash
                set -eux
                exec >> /var/log/bootstrap.log 2>&1

                instance_id=`curl http://169.254.169.254/latest/meta-data/instance-id`

                aws ec2 associate-address --instance-id $instance_id --allocation-id $EIP

                detached_interface () {
                    local attachment_id=`aws ec2 describe-network-interface-attribute \
                        --network-interface-id $ENI --attribute attachment \
                        --query Attachment.AttachmentId --output text`
                    [ $attachment_id = None ]
                }
                until detached_interface; do sleep 1; done
                aws ec2 attach-network-interface --device-index 1 --instance-id $instance_id \
                    --network-interface-id $ENI

              mode: "000755"
            /tmp/bootstrap/mount-volumes.sh:
              content: !Sub |
                #!/bin/bash
                set -eux
                exec >> /var/log/bootstrap.log 2>&1

                # wait for previous instance to go down and detach volumes of blockchain data gracefully
                for volume in ${HotVolume} ${ColdVolume}; do
                    while [ -n "`aws ec2 describe-volumes --volume-ids $volume --output text \
                        --query Volumes[*].Attachments[*].InstanceId`" ]; do
                        sleep 1
                    done
                done

                instance_id=`curl http://169.254.169.254/latest/meta-data/instance-id`
                aws ec2 attach-volume --volume-id ${HotVolume} --instance-id $instance_id --device /dev/sdf
                aws ec2 attach-volume --volume-id ${ColdVolume} --instance-id $instance_id --device /dev/sdg
                # buffer to make sure devices are symlinked
                sleep 3
                hot_device=`readlink -f /dev/sdf`
                cold_device=`readlink -f /dev/sdg`

                for device in $hot_device $cold_device; do
                    # If output isn't more informative than "$device: data", there is no file system on the device.
                    if file -s $device | grep -q '^'$device': data$'; then /sbin/mkfs.xfs $device; fi
                done

                mkdir -p /mnt/geth /mnt/freezer
                mount $hot_device /mnt/geth
                mount $cold_device /mnt/freezer
              mode: "000755"
            /tmp/bootstrap/download-geth.sh:
              content: !Sub |
                #!/bin/bash
                set -eux
                exec >> /var/log/bootstrap.log 2>&1

                BUILD_ARCHIVE=${GethBuild}.tar.gz

                archive_link=https://gethstore.blob.core.windows.net/builds/$BUILD_ARCHIVE
                curl $archive_link -O
                curl $archive_link.asc -O

                gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys 9BA28146
                gpg --verify $BUILD_ARCHIVE.asc

                tar xzf $BUILD_ARCHIVE -C /usr/local/bin
              mode: "000755"
            /etc/systemd/system/geth.sh:
              content: !Sub |
                #!/bin/bash

                if ${NetRestrict}; then
                    netrestrict=`curl https://ip-ranges.amazonaws.com/ip-ranges.json |
                        grep -Po '(?<="ip_prefix": ")(\d{1,3}\.){3}\d{1,3}/\d{1,2}' |
                        paste -sd,`
                else netrestrict=0.0.0.0/0; fi

                /usr/local/bin/${GethBuild}/geth \
                    --datadir /mnt/geth \
                    --datadir.ancient /mnt/freezer \
                    --http \
                    --http.api eth \
                    --http.addr 0.0.0.0 \
                    --ws \
                    --ws.api eth \
                    --ws.addr 0.0.0.0 \
                    --netrestrict $netrestrict \
                    --metrics \
                    --pprof \
                    --pprof.addr=0.0.0.0
              mode: "000755"
            /etc/systemd/system/geth.service:
              content: |
                [Unit]
                Description=Geth Node
                After=network.target
                [Service]
                ExecStart=/etc/systemd/system/geth.sh
                Restart=always
                RestartSec=5s
              mode: "000644"
            /etc/profile.d/env.sh:
              content: !Sub |
                export PATH=$PATH:/usr/local/bin/${GethBuild}
              mode: "000755"
          commands:
            00_attach_network_interfaces:
              command: "/tmp/bootstrap/attach-network-interfaces.sh"
              env:
                AWS_DEFAULT_REGION: !Ref "AWS::Region"
                EIP: !GetAtt EIP.AllocationId
                ENI: !ImportValue blake-network-eth-eni
            01_mount_volumes:
              command: "/tmp/bootstrap/mount-volumes.sh"
              env:
                AWS_DEFAULT_REGION: !Ref "AWS::Region"
            02_download_geth:
              test: !Sub "test ! -d /usr/local/bin/${GethBuild}"
              command: "/tmp/bootstrap/download-geth.sh"
            03_start:
              command: |
                systemctl daemon-reload
                systemctl enable geth --now

Outputs:
  PublicIP:
    Value: !Ref EIP
    Export:
      Name: !Sub ${AWS::StackName}-public-ip

