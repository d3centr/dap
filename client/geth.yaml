# Run command below to deploy geth. Note: keep the same aws cli default region configured across blake modules.
# aws cloudformation create-stack --stack-name bgeth-v0 --template-body file://geth.yaml --capabilities CAPABILITY_IAM
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  GethBuild:
    Type: String
    Default: geth-alltools-linux-amd64-1.10.7-12f0ff40
  Image:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-kernel-5.10-hvm-x86_64-gp2
  InstanceSize:
    Type: String
    Default: large
    AllowedValues:
      - large
      - xlarge
  HotVolumeSize:
    Type: Number
    Default: 200
  ColdVolumeSize:
    Type: Number
    Default: 300
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 192.168.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}/VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}/InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 192.168.0.0/17
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}/SubnetA
        - Key: kubernetes.io/role/elb
          Value: 1
        - Key: kubernetes.io/cluster/blue-blake
          Value: shared
        - Key: kubernetes.io/cluster/green-blake
          Value: shared
  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 192.168.128.0/17
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}/SubnetB
        - Key: kubernetes.io/role/elb
          Value: 1
        - Key: kubernetes.io/cluster/blue-blake
          Value: shared
        - Key: kubernetes.io/cluster/green-blake
          Value: shared
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}/RouteTable 
      VpcId: !Ref VPC
  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA
  SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetB
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  ListenerSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub ${AWS::StackName}-listener
      GroupDescription: !Sub ${AWS::StackName}-listener
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 30303
          IpProtocol: tcp
          ToPort: 30303
      VpcId: !Ref VPC
  DiscoverySG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub ${AWS::StackName}-discovery
      GroupDescription: !Sub ${AWS::StackName}-discovery
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 30303
          IpProtocol: udp
          ToPort: 30303
      VpcId: !Ref VPC
  WebSocketSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub ${AWS::StackName}-ws
      GroupDescription: !Sub ${AWS::StackName}-ws
      SecurityGroupIngress:
        - CidrIp: 192.168.0.0/17
          FromPort: 8546
          IpProtocol: tcp
          ToPort: 8546
      VpcId: !Ref VPC
  SpotFleet: 
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        AllocationStrategy: lowestPrice
        InstanceInterruptionBehavior: stop
        TargetCapacity: 1
        IamFleetRole: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/spotfleet.amazonaws.com/AWSServiceRoleForEC2SpotFleet
        LaunchTemplateConfigs:
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - SubnetId: !Ref SubnetA
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - SubnetId: !Ref SubnetA
                InstanceType: !Join ['', [m5d., !Ref InstanceSize]]
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - SubnetId: !Ref SubnetA
                InstanceType: !Join ['', [m5n., !Ref InstanceSize]]
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - SubnetId: !Ref SubnetA
                InstanceType: !Join ['', [m5dn., !Ref InstanceSize]]
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref Image
        InstanceType: !Join ['', [m5., !Ref InstanceSize]]
        SecurityGroupIds:
          - !GetAtt ListenerSG.GroupId
          - !GetAtt DiscoverySG.GroupId
          - !GetAtt WebSocketSG.GroupId
        BlockDeviceMappings:
          - DeviceName: /dev/sdf
            Ebs:
              VolumeType: gp3
              VolumeSize: !Ref HotVolumeSize
              DeleteOnTermination: true
          - DeviceName: /dev/sdg
            Ebs:
              VolumeType: sc1
              VolumeSize: !Ref ColdVolumeSize
              DeleteOnTermination: true
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Ref AWS::StackName
        UserData:
          Fn::Base64: !Sub |
            Content-Type: multipart/mixed; boundary="//"
            MIME-Version: 1.0
            
            --//
            Content-Type: text/cloud-config; charset="us-ascii"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 7bit
            Content-Disposition: attachment; filename="cloud-config.txt"
            
            #cloud-config
            cloud_final_modules:
            - [scripts-user, always]
            
            --//
            Content-Type: text/x-shellscript; charset="us-ascii"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 7bit
            Content-Disposition: attachment; filename="userdata.txt"
            
            #!/bin/bash
            /opt/aws/bin/cfn-init -s ${AWS::StackName} -r InstanceProfile --region ${AWS::Region} -c client
            --//--
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - ec2.amazonaws.com
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref ManagedPolicy
  # Allow connection through Session Manager (aws api).
  ManagedPolicy: 
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - ssm:UpdateInstanceInformation
              - ssmmessages:CreateControlChannel
              - ssmmessages:CreateDataChannel
              - ssmmessages:OpenControlChannel
              - ssmmessages:OpenDataChannel
            Resource:
              - "*"
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          client:
            - bootstrap
        bootstrap:
          files:
            /tmp/bootstrap/mount-volumes.sh:
              content: |
                #!/bin/bash
                set -eux
                exec >> /var/log/bootstrap.log 2>&1

                hot_device=`readlink -f /dev/sdf`
                cold_device=`readlink -f /dev/sdg`

                for device in $hot_device $cold_device; do
                    # If output isn't more informative than "$device: data", there is no file system on the device.
                    if file -s $device | grep -q '^'$device': data$'; then /sbin/mkfs.xfs $device; fi
                done

                mkdir -p /mnt/geth /mnt/freezer
                mount $hot_device /mnt/geth
                mount $cold_device /mnt/freezer
              mode: "000755"
            /tmp/bootstrap/download-geth.sh:
              content: |
                #!/bin/bash
                set -eux
                exec >> /var/log/bootstrap.log 2>&1

                archive_link=https://gethstore.blob.core.windows.net/builds/$BUILD_ARCHIVE
                curl $archive_link -O
                curl $archive_link.asc -O

                gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys 9BA28146
                gpg --verify $BUILD_ARCHIVE.asc

                tar xzf $BUILD_ARCHIVE -C /usr/local/bin
              mode: "000755"
            /etc/systemd/system/geth.sh:
              content: !Sub |
                #!/bin/bash
                /usr/local/bin/${GethBuild}/geth \
                    --datadir /mnt/geth \
                    --datadir.ancient /mnt/freezer \
                    --ws \
                    --ws.api eth \
                    --ws.addr 0.0.0.0
              mode: "000755"
            /etc/systemd/system/geth.service:
              content: |
                [Unit]
                Description=Geth Node
                After=network.target
                [Service]
                ExecStart=/etc/systemd/system/geth.sh
                Restart=always
                RestartSec=5s
              mode: "000644"
            /etc/profile.d/env.sh:
              content: !Sub |
                export PATH=$PATH:/usr/local/bin/${GethBuild}
              mode: "000755"
          commands:
            00_mount_volumes:
              command: "/tmp/bootstrap/mount-volumes.sh"
            01_download_geth:
              test: !Sub "test ! -d /usr/local/bin/${GethBuild}"
              command: "/tmp/bootstrap/download-geth.sh"
              env:
                BUILD_ARCHIVE: !Sub "${GethBuild}.tar.gz"
            02_start:
              command: |
                systemctl daemon-reload
                systemctl enable geth --now
Outputs:
  SubnetA:
    Value: !Ref SubnetA
    Export:
      Name: !Sub ${AWS::StackName}-subnet-a
  SubnetB:
    Value: !Ref SubnetB
    Export:
      Name: !Sub ${AWS::StackName}-subnet-b

