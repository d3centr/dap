AWSTemplateFormatVersion: 2010-09-09

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 192.168.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}/VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}/InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 192.168.0.0/17
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}/SubnetA
        - Key: kubernetes.io/role/elb
          Value: 1
        - Key: kubernetes.io/cluster/blue-dap
          Value: shared
        - Key: kubernetes.io/cluster/green-dap
          Value: shared
  SubnetB:
    Description: "eksctl requires 2 subnets, could also be used later on to segregate blue and green DaP"
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 192.168.128.0/17
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}/SubnetB
        - Key: kubernetes.io/role/elb
          Value: 1
        - Key: kubernetes.io/cluster/blue-dap
          Value: shared
        - Key: kubernetes.io/cluster/green-dap
          Value: shared
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}/RouteTable 
      VpcId: !Ref VPC
  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA
  SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetB
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  ClientBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub dap-${AWS::Region}-client-${AWS::AccountId}

  # Geth
  ListenerSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub ${AWS::StackName}-listener
      GroupDescription: !Sub ${AWS::StackName}-listener
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 30303
          IpProtocol: tcp
          ToPort: 30303
      VpcId: !Ref VPC
  DiscoverySG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub ${AWS::StackName}-discovery
      GroupDescription: !Sub ${AWS::StackName}-discovery
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 30303
          IpProtocol: udp
          ToPort: 30303
      VpcId: !Ref VPC
  HttpSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub ${AWS::StackName}-http
      GroupDescription: !Sub ${AWS::StackName}-http
      SecurityGroupIngress:
        - CidrIp: 192.168.0.0/17
          FromPort: 8545
          IpProtocol: tcp
          ToPort: 8545
      VpcId: !Ref VPC
  WebSocketSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub ${AWS::StackName}-ws
      GroupDescription: !Sub ${AWS::StackName}-ws
      SecurityGroupIngress:
        - CidrIp: 192.168.0.0/17
          FromPort: 8546
          IpProtocol: tcp
          ToPort: 8546
      VpcId: !Ref VPC
  MetricsSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub ${AWS::StackName}-metrics
      GroupDescription: !Sub ${AWS::StackName}-metrics
      SecurityGroupIngress:
        - CidrIp: 192.168.0.0/17
          FromPort: 6060
          IpProtocol: tcp
          ToPort: 6060
      VpcId: !Ref VPC
  AuthrpcSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub ${AWS::StackName}-authrpc
      GroupDescription: !Sub ${AWS::StackName}-authrpc
      SecurityGroupIngress:
        - CidrIp: 192.168.0.0/17
          FromPort: 8551
          IpProtocol: tcp
          ToPort: 8551
      VpcId: !Ref VPC
  EthENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Tags:
        # tag authorizing ec2:AttachNetworkInterface in dap-geth stack
        - Key: Name
          Value: dap-geth-mainnet
      GroupSet:
        - !GetAtt MetricsSG.GroupId
        - !GetAtt AuthrpcSG.GroupId
      SubnetId: !Ref SubnetA
  EthENIIP:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: /cfn/dap/network/geth/ip/eni
      Type: String
      Value: !GetAtt EthENI.PrimaryPrivateIpAddress

  LighthouseSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub ${AWS::StackName}-lighthouse
      GroupDescription: !Sub ${AWS::StackName}-lighthouse
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 9000
          IpProtocol: tcp
          ToPort: 9000
        - CidrIp: 0.0.0.0/0
          FromPort: 9000
          IpProtocol: udp
          ToPort: 9000
      VpcId: !Ref VPC
  LighthouseMetricsSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub ${AWS::StackName}-lighthouse-metrics
      GroupDescription: !Sub ${AWS::StackName}-lighthouse-metrics
      SecurityGroupIngress:
        - CidrIp: 192.168.0.0/17
          FromPort: 5054
          IpProtocol: tcp
          ToPort: 5054
      VpcId: !Ref VPC
  LighthouseENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Tags:
        # tag authorizing ec2:AttachNetworkInterface in lighthouse stack
        - Key: Name
          Value: dap-lighthouse-mainnet
      GroupSet:
        - !GetAtt LighthouseMetricsSG.GroupId
      SubnetId: !Ref SubnetA

  PrysmSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub ${AWS::StackName}-prysm
      GroupDescription: !Sub ${AWS::StackName}-prysm
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 13000
          IpProtocol: tcp
          ToPort: 13000
        - CidrIp: 0.0.0.0/0
          FromPort: 12000
          IpProtocol: udp
          ToPort: 12000
      VpcId: !Ref VPC
  PrysmMetricsSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub ${AWS::StackName}-prysm-metrics
      GroupDescription: !Sub ${AWS::StackName}-prysm-metrics
      SecurityGroupIngress:
        - CidrIp: 192.168.0.0/17
          FromPort: 8080
          IpProtocol: tcp
          ToPort: 8080
      VpcId: !Ref VPC
  PrysmENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Tags:
        # tag authorizing ec2:AttachNetworkInterface in prysm stack
        - Key: Name
          Value: dap-prysm-mainnet
      GroupSet:
        - !GetAtt PrysmMetricsSG.GroupId
      SubnetId: !Ref SubnetA

Outputs:
  SubnetA:
    Value: !Ref SubnetA
    Export:
      Name: !Sub ${AWS::StackName}-subnet-a
  SubnetB:
    Value: !Ref SubnetB
    Export:
      Name: !Sub ${AWS::StackName}-subnet-b

  # Geth
  ListenerSG:
    Value: !GetAtt ListenerSG.GroupId
    Export:
      Name: !Sub ${AWS::StackName}-listener-sg
  DiscoverySG:
    Value: !GetAtt DiscoverySG.GroupId
    Export:
      Name: !Sub ${AWS::StackName}-discovery-sg
  HttpSG:
    Value: !GetAtt HttpSG.GroupId
    Export:
      Name: !Sub ${AWS::StackName}-http-sg
  WebSocketSG:
    Value: !GetAtt WebSocketSG.GroupId
    Export:
      Name: !Sub ${AWS::StackName}-ws-sg
  EthENI:
    Value: !GetAtt EthENI.Id
    Export:
      Name: !Sub ${AWS::StackName}-geth-eni
  EthIP:
    Value: !GetAtt EthENI.PrimaryPrivateIpAddress
    Export:
      Name: !Sub ${AWS::StackName}-geth-ip

  LighthouseSG:
    Value: !GetAtt LighthouseSG.GroupId
    Export:
      Name: !Sub ${AWS::StackName}-lighthouse-sg
  LighthouseENI:
    Value: !GetAtt LighthouseENI.Id
    Export:
      Name: !Sub ${AWS::StackName}-lighthouse-eni
  LighthouseIP:
    Value: !GetAtt LighthouseENI.PrimaryPrivateIpAddress
    Export:
      Name: !Sub ${AWS::StackName}-lighthouse-ip

  PrysmSG:
    Value: !GetAtt PrysmSG.GroupId
    Export:
      Name: !Sub ${AWS::StackName}-prysm-sg
  PrysmENI:
    Value: !GetAtt PrysmENI.Id
    Export:
      Name: !Sub ${AWS::StackName}-prysm-eni
  PrysmIP:
    Value: !GetAtt PrysmENI.PrimaryPrivateIpAddress
    Export:
      Name: !Sub ${AWS::StackName}-prysm-ip

